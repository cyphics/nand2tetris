import unittest

from Parser import Parser

class TestParser(unittest.TestCase):
    def test_arithm(self):
        parser = Parser()
        parser.load_instructions([
            "push constant 17",
            "push constant 17",
            "eq",
            "push constant 17",
            "push constant 16",
            "eq",
            "push constant 16",
            "push constant 17",
            "eq",
            "push constant 892",
            "push constant 891",
            "lt",
            "push constant 891",
            "push constant 892",
            "lt",
            "push constant 891",
            "push constant 891",
            "lt",
            "push constant 32767",
            "push constant 32766",
            "gt",
            "push constant 32766",
            "push constant 32767",
            "gt",
            "push constant 32766",
            "push constant 32766",
            "gt",
            "push constant 57",
            "push constant 31",
            "push constant 53",
            "add",
            "push constant 112",
            "sub",
            "neg",
            "and",
            "push constant 82",
            "or",
            "not"
        ])
        result = parser.instruc_list
        expected = [
            "@17",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@17",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_0",
            "D;JEQ",
            "D=0",
            "@THEN_0",
            "0;JMP",
            "(TRUE_0)",
            "D=-1",
            "(THEN_0)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@17",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@16",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_1",
            "D;JEQ",
            "D=0",
            "@THEN_1",
            "0;JMP",
            "(TRUE_1)",
            "D=-1",
            "(THEN_1)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@16",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@17",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_2",
            "D;JEQ",
            "D=0",
            "@THEN_2",
            "0;JMP",
            "(TRUE_2)",
            "D=-1",
            "(THEN_2)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@892",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@891",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_3",
            "D;JLT",
            "D=0",
            "@THEN_3",
            "0;JMP",
            "(TRUE_3)",
            "D=-1",
            "(THEN_3)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@891",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@892",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_4",
            "D;JLT",
            "D=0",
            "@THEN_4",
            "0;JMP",
            "(TRUE_4)",
            "D=-1",
            "(THEN_4)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@891",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@891",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_5",
            "D;JLT",
            "D=0",
            "@THEN_5",
            "0;JMP",
            "(TRUE_5)",
            "D=-1",
            "(THEN_5)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32767",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32766",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_6",
            "D;JGT",
            "D=0",
            "@THEN_6",
            "0;JMP",
            "(TRUE_6)",
            "D=-1",
            "(THEN_6)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32766",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32767",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_7",
            "D;JGT",
            "D=0",
            "@THEN_7",
            "0;JMP",
            "(TRUE_7)",
            "D=-1",
            "(THEN_7)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32766",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@32766",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M-D",
            "@TRUE_8",
            "D;JGT",
            "D=0",
            "@THEN_8",
            "0;JMP",
            "(TRUE_8)",
            "D=-1",
            "(THEN_8)",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@57",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@31",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@53",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "@112",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=M-D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "M=-D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D&M",
            "@R0",
            "M=M+1",
            "@82",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D|M",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "M=!D",
            "@R0",
            "M=M+1",
            "(END)",
            "@END",
            "0;JMP"
        ]
        self.assertEqual(expected, result)

    def test_memory(self):
        parser = Parser()
        parser.load_instructions([
            "push constant 10",
            "pop local 0",
            "push constant 21",
            "push constant 22",
            "pop argument 2",
            "pop argument 1",
            "push constant 36",
            "pop this 6",
            "push constant 42",
            "push constant 45",
            "pop that 5",
            "pop that 2",
            "push constant 510",
            "pop temp 6",
            "push local 0",
            "push that 5",
            "add",
            "push argument 1",
            "sub",
            "push this 6",
            "push this 6",
            "add",
            "sub",
            "push temp 6",
            "add"
        ])
        result = parser.instruc_list
        expected = [
            "@10",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R1",
            "D=M",
            "@0",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@21",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@22",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R2",
            "D=M",
            "@2",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@R2",
            "D=M",
            "@1",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@36",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R3",
            "D=M",
            "@6",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@42",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@45",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=M",
            "@5",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@R4",
            "D=M",
            "@2",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@510",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@5",
            "D=A",
            "@6",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@R1",
            "D=M",
            "@0",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=M",
            "@5",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "@R2",
            "D=M",
            "@1",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=M-D",
            "@R0",
            "M=M+1",
            "@R3",
            "D=M",
            "@6",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R3",
            "D=M",
            "@6",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=M-D",
            "@R0",
            "M=M+1",
            "@5",
            "D=A",
            "@6",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "(END)",
            "@END",
            "0;JMP"

        ]
        self.assertEqual(expected, result)

    def test_pointers(self):
        parser = Parser()
        parser.load_instructions([
            "push constant 3030",
            "pop pointer 0",
            "push constant 3040",
            "pop pointer 1",
            "push constant 32",
            "pop this 2",
            "push constant 46",
            "pop that 6",
            "push pointer 0",
            "push pointer 1",
            "add",
            "push this 2",
            "sub",
            "push that 6",
            "add"

        ])
        result = parser.instruc_list
        expected = [
            "@3030",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R3",
            "D=A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@3040",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@32",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R3",
            "D=M",
            "@2",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@46",
            "D=A",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=M",
            "@6",
            "D=D+A",
            "@addr",
            "M=D",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@addr",
            "A=M",
            "M=D",
            "@R3",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "@R3",
            "D=M",
            "@2",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=M-D",
            "@R0",
            "M=M+1",
            "@R4",
            "D=M",
            "@6",
            "D=D+A",
            "A=D",
            "D=M",
            "@R0",
            "A=M",
            "M=D",
            "@R0",
            "M=M+1",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "D=M",
            "@R0",
            "M=M-1",
            "@R0",
            "A=M",
            "M=D+M",
            "@R0",
            "M=M+1",
            "(END)",
            "@END",
            "0;JMP"

        ]
        self.assertEqual(expected, result)

if __name__ == '__main__':
    unittest.main()
