// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram, heap;
	static Array freeList;
	static int heap_base, heap_size;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap_base = 2048;
		let heap_size = 14335;
		let freeList = heap_base;
		let freeList[0] = heap_size;
		let freeList[1] = 0;
		
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int segment, next_segment, previous_segment, segment_size, result;

		let segment = freeList;
		let next_segment = -1;

		while(~(next_segment = 0)){
			let segment_size = ram[segment];
			let next_segment = ram[segment + 1];

			if((segment_size > size )) {                             		// segment found!
				if(segment_size = (size + 1)) {                       		// segment is exactly what is needed
					let ram[previous_segment + 1] = next_segment;    		// connect previous segment with next one
					let result = segment + 1;
				} else {
					let ram[segment]    = segment_size - (size + 1); 		// resize segment with new truncated size
					let result          = segment + (segment_size - size);
					let ram[result - 1] = size;                      		// set size of newly allocated segment
				}
				return result;
			} else {                                                 		// search next segment
				let previous_segment = segment;
				let segment = next_segment;
			}
		}
		return -1;
	}

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int segment, next_segment, size;

		let segment = o - 1;
		let size = ram[segment];
		let next_segment 	  = ram[freeList + 1];
		let ram[freeList + 1] = segment;
		let ram[segment] 	  = size;
		let ram[segment + 1] = next_segment;

		return;
    }    
}
